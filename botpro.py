from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters
import pyodbc
from datetime import datetime

# Database connection details
DB_SERVER = 'Navsuv'
DB_USER = '1c'
DB_PASSWORD = 'xxxx1111*'
DB_NAME = 'Suvtaminoti_venons'
DB_TABLE = '–ë–æ—Ç–î–∞–Ω–Ω—ã–µ–ó—É–ø–°—É–≤–û–∫–∞–≤–∞'

# Define states
ENTERING_TAB_NOMER = 1
SELECTING_PERIOD = 2

def replace_special_characters(text):
    if not isinstance(text, str):
        return text
    
    replacements = {
        "@": "“ì",
        "#": "“≥",
        "&": "“ö",
        "*": "“í",
        "?": "“õ",
        "$": "“≤"
    }

    for old_char, new_char in replacements.items():
        text = text.replace(old_char, new_char)
    
    return text


# Create a database connection
def create_connection():
    conn_str = (
        'DRIVER={SQL Server};'  # Use the working driver
        f'SERVER={DB_SERVER};'
        f'DATABASE={DB_NAME};'
        f'UID={DB_USER};'
        f'PWD={DB_PASSWORD};'
    )
    return pyodbc.connect(conn_str)
# Function to check if chat_id is registered
def is_registered(chat_id):
    with create_connection() as conn:
        cursor = conn.cursor()
        query = f"SELECT COUNT(*) FROM {DB_TABLE} WHERE ID–°–æ—Ç—Ä—É–¥–Ω–∏–∫ = ?"
        cursor.execute(query, (str(chat_id),))  # Treat chat_id as a string
        return cursor.fetchone()[0] > 0

# Function to get the chat_id associated with the tab_nomer
def get_chat_id_for_tab_nomer(tab_nomer):
    with create_connection() as conn:
        cursor = conn.cursor()
        tab_nomer = str(tab_nomer).strip()  # Ensure tab_nomer is treated as a string
        print(f"Debug: Querying for tab_nomer: {tab_nomer}")  # Debugging line
        query = f"SELECT ID–°–æ—Ç—Ä—É–¥–Ω–∏–∫ FROM {DB_TABLE} WHERE –¢–∞–±–ù–æ–º = ?"
        cursor.execute(query, (tab_nomer,))
        result = cursor.fetchone()
        print(f"Debug: Query result: {result}")  # Debugging line
        return result[0] if result else None


# Function to get unique periods in mm-YYYY format for the registered user
def get_unique_periods(tab_nomer, chat_id):
    with create_connection() as conn:
        cursor = conn.cursor()
        query = f"""
        SELECT DISTINCT –ü–µ—Ä–∏–æ–¥
        FROM {DB_TABLE}
        WHERE –¢–∞–±–ù–æ–º = ? AND ID–°–æ—Ç—Ä—É–¥–Ω–∏–∫ = ?
        """
        cursor.execute(query, (str(tab_nomer), str(chat_id)))  # Ensure both are treated as strings
        rows = cursor.fetchall()
        
        periods = [row[0].strftime('%m-%Y') for row in rows]
        return sorted(set(periods), reverse=True)

def get_data_for_period(tab_nomer, chat_id, period):
    with create_connection() as conn:
        cursor = conn.cursor()

        # Convert period to 'YYYY-MM' format and use it in the query
        period_formatted = period[-4:] + '-' + period[:2]  # Convert 'MM-YYYY' to 'YYYY-MM'

        query = f"""
        SELECT –í–∏–¥–†–∞—Å—á–µ—Ç–∞–ö–æ–¥, –í–∏–¥–†–∞—Å—á–µ—Ç–∞, –†–µ–∑—É–ª—å—Ç–∞—Ç, –í–∏–¥, –î–Ω–∏, –ß–∞—Å—ã
        FROM {DB_TABLE}
        WHERE –¢–∞–±–ù–æ–º = ? AND ID–°–æ—Ç—Ä—É–¥–Ω–∏–∫ = ? AND CONVERT(VARCHAR(7), –ü–µ—Ä–∏–æ–¥, 126) = ?
        """
        cursor.execute(query, (str(tab_nomer), str(chat_id), period_formatted))  # Ensure tab_nomer and chat_id are strings
        rows = cursor.fetchall()

        data = {'–ù–∞—á': [], '–£–¥': [], '–û–±': []}  # Added '–û–±' to store total values
        for row in rows:
            –≤–∏–¥ = row[3]
            item = {
                '–í–∏–¥–†–∞—Å—á–µ—Ç–∞–ö–æ–¥': row[0],
                '–í–∏–¥–†–∞—Å—á–µ—Ç–∞': row[1],
                '–†–µ–∑—É–ª—å—Ç–∞—Ç': row[2],
                '–î–Ω–∏': row[4],  # Added –î–Ω–∏
                '–ß–∞—Å—ã': row[5],  # Added –ß–∞—Å—ã
            }
            if –≤–∏–¥ == '–ù–∞—á':
                data['–ù–∞—á'].append(item)
            elif –≤–∏–¥ == '–£–¥':
                data['–£–¥'].append(item)
            elif –≤–∏–¥ == '–û–±':  # Handle '–û–±' (–û–±—â–∏–π –∏—Ç–æ–≥)
                data['–û–±'].append(item)
        
        return data['–ù–∞—á'], data['–£–¥'], data['–û–±']  # Return the total '–û–±' list

# Command handler for /start
async def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    if is_registered(chat_id):
        context.user_data['chat_id'] = chat_id
        context.user_data['state'] = ENTERING_TAB_NOMER
        
        await update.message.reply_text('üá∑üá∫ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:')
        await update.message.reply_text("üá∫üáø Siz allaqachon ro'yxatdan o'tgansiz. Iltimos, tabel raqamingizni kiriting:")
    else:
        await update.message.reply_text('üá∑üá∫ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /getid, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
        await update.message.reply_text("üá∫üáø Siz ro'yxatdan o'tmagansiz. Ro ªyxatdan o ªtish uchun  /getid tugmasini bosing.")

# Command handler for /getid (for unregistered users to get their chat_id)
async def getid(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üá∑üá∫ –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞: {chat_id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    await update.message.reply_text(f"üá∫üáø Sizning chat identifikatoringiz: {chat_id}. Ro ªyxatdan o ªtish uchun admin bilan bog ªlaning.")

# Handler for user input (tab_nomer)
async def handle_user_input(update: Update, context: CallbackContext):
    text = update.message.text
    state = context.user_data.get('state')

    if state == ENTERING_TAB_NOMER:
        await handle_tab_nomer(update, context, text)
    elif state == SELECTING_PERIOD:
        await handle_period_selection(update, context, text)
    else:
        await update.message.reply_text('üá∑üá∫ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è /start.')
        await update.message.reply_text('üá∫üáø Kutilmagan kirish komandasi. Iltimos, /start yordamida qaytadan boshlang.')

# Function to handle tab_nomer input
async def handle_tab_nomer(update: Update, context: CallbackContext, text):
    chat_id = context.user_data.get('chat_id')

    if not chat_id:
        await update.message.reply_text('üá∑üá∫ –û—à–∏–±–∫–∞: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è /start.')
        await update.message.reply_text('üá∫üáø Xatolik: Chat identifikatoringiz topilmadi. Iltimos, /start yordamida qaytadan boshlang.')
        return

    tab_nomer = str(text).strip()  # Ensure tab_nomer is a string

    print(f"Debug: Entered tab_nomer: {tab_nomer}")  # Debugging line

    expected_chat_id = get_chat_id_for_tab_nomer(tab_nomer)
    
    print(f"Debug: Retrieved expected_chat_id: {expected_chat_id}")  # Debugging line

    if expected_chat_id is None:
        await update.message.reply_text(f'üá∑üá∫ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä {tab_nomer} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.')
        await update.message.reply_text(f"üá∫üáø Ma'lumotlar bazasida {tab_nomer} tabel raqami topilmadi.")
    elif str(expected_chat_id) == str(chat_id):
        unique_periods = get_unique_periods(tab_nomer, chat_id)
        
        if unique_periods:
            buttons = [[period] for period in unique_periods]
            reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(" üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—åüëá", reply_markup=reply_markup)
            await update.message.reply_text(" üìÜ Ko'rmoqchi bo'lgan davringizni tanlangüëá ", reply_markup=reply_markup)
            context.user_data['tab_nomer'] = tab_nomer
            context.user_data['state'] = SELECTING_PERIOD
        else:
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await update.message.reply_text("Ma'lumotlar topilmadi")
    else:
        await update.message.reply_text(f"üá∑üá∫ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–µ –ø–æ —ç—Ç–æ–º—É {tab_nomer} —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await update.message.reply_text(f"üá∫üáø Ushbu {tab_nomer} tabel raqami bilan registratsiyadan o'tmagansiz, administrator bilan bog'laning.")

async def handle_period_selection(update: Update, context: CallbackContext, period):
    tab_nomer = context.user_data.get('tab_nomer')
    chat_id = context.user_data.get('chat_id')

    if not tab_nomer or not chat_id:
        await update.message.reply_text('–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è /start.')
        return

    # Fetch the required data for the period
    data_nach, data_ud, data_ob = get_data_for_period(tab_nomer, chat_id, period)
    
    # Fetch employee details (–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –î–Ω–∏, –ß–∞—Å—ã)
    with create_connection() as conn:
        cursor = conn.cursor()
        query = f"SELECT –°–æ—Ç—Ä—É–¥–Ω–∏–∫, –î–Ω–∏, –ß–∞—Å—ã FROM {DB_TABLE} WHERE ID–°–æ—Ç—Ä—É–¥–Ω–∏–∫ = ?"
        cursor.execute(query, str(chat_id))
        result = cursor.fetchone()

        # Apply special character replacement to the employee's name (–°–æ—Ç—Ä—É–¥–Ω–∏–∫)
        employee_name = replace_special_characters(result[0])
        dni = result[1]  # –î–Ω–∏
        chasi = result[2]  # –ß–∞—Å—ã
    
    # Construct the message for –ù–∞—á–∏—Å–ª–µ–Ω–∏—è and –£–¥–µ—Ä–∂–∞–Ω–∏—è
    message_nach = f"üìÖ –ü–µ—Ä–∏–æ–¥: {period}\n\n"
    message_nach += f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}\n\n"
    message_nach += "‚ö°Ô∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏—è:\n"

    # Process –ù–∞—á–∏—Å–ª–µ–Ω–∏—è
    for item in data_nach:
        vid_rascheta = replace_special_characters(item['–í–∏–¥–†–∞—Å—á–µ—Ç–∞'])
        days = item['–î–Ω–∏']
        hours = item['–ß–∞—Å—ã']
        result = item['–†–µ–∑—É–ª—å—Ç–∞—Ç']
        formatted_result = f"{result:,.2f}".replace(",", " ")  # Format for Russian number display
        
        line = f"üîπ {vid_rascheta} ‚Äî {formatted_result} —Å—É–º"
        if days != 0 and days != 0.0:
            line += f" \n –î–Ω–∏:{days}"
        if hours != 0 and hours != 0.0:
            line += f"  –ß–∞—Å—ã:{hours}"
        message_nach += f"{line}\n"

    message_ud = "\n‚ö°Ô∏è –£–¥–µ—Ä–∂–∞–Ω–∏—è:\n"

    # Process –£–¥–µ—Ä–∂–∞–Ω–∏—è
    for item in data_ud:
        vid_rascheta = replace_special_characters(item['–í–∏–¥–†–∞—Å—á–µ—Ç–∞'])
        days = item['–î–Ω–∏']
        hours = item['–ß–∞—Å—ã']
        result = item['–†–µ–∑—É–ª—å—Ç–∞—Ç']
        formatted_result = f"{result:,.2f}".replace(",", " ")
        
        line = f"üî∏ {vid_rascheta} ‚Äî {formatted_result} —Å—É–º"
        if days != 0 and days != 0.0:
            line += f" \n –î–Ω–∏:{days}"
        if hours != 0 and hours != 0.0:
            line += f"  –ß–∞—Å—ã:{hours}"
        message_ud += f"{line}\n"

    message_ob = "\nüßÆ –û–±—â–∏–π –∏—Ç–æ–≥:\n"

    # Process –û–±—â–∏–π –∏—Ç–æ–≥ (–û–±)
    for item in data_ob:
        vid_rascheta = replace_special_characters(item['–í–∏–¥–†–∞—Å—á–µ—Ç–∞'])
        days = item['–î–Ω–∏']
        hours = item['–ß–∞—Å—ã']
        result = item['–†–µ–∑—É–ª—å—Ç–∞—Ç']
        formatted_result = f"{result:,.2f}".replace(",", " ")
        
        line = f"üîπ {vid_rascheta} ‚Äî {formatted_result} —Å—É–º"
        if days != 0 and days != 0.0:
            line += f" \n –î–Ω–∏:{days}"
        if hours != 0 and hours != 0.0:
            line += f"  –ß–∞—Å—ã:{hours}"
        message_ob += f"{line}\n"

    # Send the final message with –ù–∞—á–∏—Å–ª–µ–Ω–∏—è, –£–¥–µ—Ä–∂–∞–Ω–∏—è, and –û–±—â–∏–π –∏—Ç–æ–≥
    await update.message.reply_text(message_nach + message_ud + message_ob, parse_mode='HTML')



    


# Main function to run the bot
def main():
    application = Application.builder().token("6147266336:AAEVYYZCy270VDW9gZwA9d40dyRfunavmVk").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getid", getid))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input))

    application.run_polling()

if __name__ == '__main__':
    main()
